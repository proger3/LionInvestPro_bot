import random
import asyncio
import os
import logging
import datetime
import aiohttp
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, BufferedInputFile
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram import Router
from PIL import Image, ImageDraw, ImageFont
import sqlite3
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN!")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
router = Router()

# –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
background_urls = [
    "https://i.ibb.co/bjDyM39N/1.png",
    "https://i.ibb.co/gbn4mq0L/2.png",
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ URL ...
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def init_db():
    try:
        conn = sqlite3.connect("posts.db")
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS scheduled_posts (
                id INTEGER PRIMARY KEY,
                chat_id INTEGER,
                post_text TEXT,
                image_data BLOB,
                scheduled_time DATETIME
            )
        """)
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        conn.close()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–≤–µ—Ç–∞ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º
def generate_investment_advice():
    topics = [
        "–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–æ–π —Å—É–º–º–æ–π?",
        "–¢–û–ü-5 –æ—à–∏–±–æ–∫ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤",
        "–ö—É–¥–∞ –≤–ª–æ–∂–∏—Ç—å 10 000 —Ä—É–±–ª–µ–π –≤ —ç—Ç–æ–º –≥–æ–¥—É?",
        "–ê–∫—Ü–∏–∏ vs –û–±–ª–∏–≥–∞—Ü–∏–∏: —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤–∏—á–∫—É?",
        "–ö–∞–∫ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å?"
    ]
    
    tips = [
        "–ù–∞—á–Ω–∏—Ç–µ —Å ETF ‚Äì —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.",
        "–ù–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤.",
        "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ø–æ–ª–Ω—è–π—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á—ë—Ç.",
        "–ò–∑—É—á–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –µ—ë –∞–∫—Ü–∏–π.",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç ‚Äì –≤–∞—à –ª—É—á—à–∏–π –¥—Ä—É–≥."
    ]
    
    post = (
        f"üìà {random.choice(topics)}\n\n"
        f"üîπ {random.choice(tips)}\n"
        f"üîπ {random.choice(tips)}\n\n"
        f"#–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #–§–∏–Ω–∞–Ω—Å—ã #–°–æ–≤–µ—Ç—ã–ù–æ–≤–∏—á–∫–∞–º"
    )
    
    return post

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ–Ω–∞
async def get_investment_background():
    return random.choice(background_urls)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
async def generate_image_with_text(bg_url: str, headline: str) -> BytesIO:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(bg_url) as resp:
                if resp.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: HTTP {resp.status}")
                bg_data = await resp.read()

        with Image.open(BytesIO(bg_data)) as img:
            draw = ImageDraw.Draw(img)
            font_size = 74
            
            try:
                font = ImageFont.truetype("arialbd.ttf", font_size)
            except:
                try:
                    font = ImageFont.truetype("DejaVuSans-Bold.ttf", font_size)
                except:
                    font = ImageFont.load_default()
                    font.size = font_size

            text_color = (255, 255, 0)  # –ñ—ë–ª—Ç—ã–π
            outline_color = (0, 0, 0)   # –ß—ë—Ä–Ω–∞—è –æ–±–≤–æ–¥–∫–∞

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            max_width = img.width * 0.8
            lines = []
            current_line = ""
            
            for word in headline.split():
                test_line = f"{current_line} {word}".strip()
                bbox = draw.textbbox((0, 0), test_line, font=font)
                test_width = bbox[2] - bbox[0]
                
                if test_width <= max_width:
                    current_line = test_line
                else:
                    lines.append(current_line)
                    current_line = word
            
            if current_line:
                lines.append(current_line)
            
            if len(lines) > 3:
                lines = lines[:3]
                lines[-1] = lines[-1][:20] + "..." if len(lines[-1]) > 20 else lines[-1]

            line_spacing = 20
            total_text_height = sum(
                draw.textbbox((0, 0), line, font=font)[3] - draw.textbbox((0, 0), line, font=font)[1]
                for line in lines
            ) + (len(lines) - 1) * line_spacing
            
            y = (img.height - total_text_height) // 2

            for line in lines:
                bbox = draw.textbbox((0, 0), line, font=font)
                text_width = bbox[2] - bbox[0]
                x = (img.width - text_width) // 2
                
                for x_offset, y_offset in [(-2, -2), (-2, 2), (2, -2), (2, 2)]:
                    draw.text((x + x_offset, y + y_offset), line, 
                             fill=outline_color, font=font)
                
                draw.text((x, y), line, fill=text_color, font=font)
                y += (bbox[3] - bbox[1]) + line_spacing

            buf = BytesIO()
            img.save(buf, format="JPEG", quality=95)
            buf.seek(0)
            return buf
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
async def check_scheduled_posts():
    try:
        conn = sqlite3.connect("posts.db")
        cursor = conn.cursor()
        
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now})")
        
        cursor.execute(
            "SELECT id, chat_id, post_text, image_data FROM scheduled_posts WHERE scheduled_time <= datetime('now')"
        )
        posts = cursor.fetchall()
        
        if not posts:
            logger.info("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return
            
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        for post_id, chat_id, post_text, image_data in posts:
            try:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=BufferedInputFile(image_data, filename="post.jpg"),
                    caption=post_text
                )
                cursor.execute("DELETE FROM scheduled_posts WHERE id = ?", (post_id,))
                conn.commit()
                logger.info(f"–ü–æ—Å—Ç {post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
    finally:
        if conn:
            conn.close()
            

# –ö–æ–º–∞–Ω–¥–∞ /getpost
# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @router
@router.message(Command("getpost"))
async def cmd_getpost(message: types.Message):
    try:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
        post_text = generate_investment_advice()
        bg_url = random.choice(background_urls)
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_with_text = await generate_image_with_text(bg_url, post_text)
        
        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é
        await message.answer_photo(
            types.BufferedInputFile(
                image_with_text.getvalue(),
                filename="preview.jpg"
            ),
            caption=f"üîπ –ü—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞:\n\n{post_text}"
        )
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        scheduled_time = datetime.now().replace(
            hour=9, minute=0, second=0
        ) + timedelta(days=1)
        
        conn = sqlite3.connect("posts.db")
        try:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO scheduled_posts (chat_id, post_text, image_data, scheduled_time) VALUES (?, ?, ?, ?)",
                (message.chat.id, post_text, image_with_text.getvalue(), scheduled_time)
            )
            conn.commit()
            await message.answer("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 9:00!")
        finally:
            conn.close()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /getpost: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–æ–≤
async def scheduler():
    while True:
        await check_scheduled_posts()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    init_db()
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
